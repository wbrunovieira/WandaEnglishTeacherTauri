import { useState } from "react";
import { invoke } from "@tauri-apps/api/tauri";
import Title from "./Title";
import RecordMessage from "./RecordMessage";

const Controller = () => {
    const [isLoading, setIsLoading] = useState(false);
    const [messages, setMessages] = useState<any[]>([]);

    const handleStop = async () => {
        console.log("Stopping recording...");
        setIsLoading(true);

        try {
            // Chama a função start_audio_capture no backend Rust
            const audioFilePath = await invoke<string>("start_audio_capture");

            console.log("Received response from server:", audioFilePath);

            // Fetch the audio file generated by the backend
            const responseBlob = await fetch(`file://${audioFilePath}`).then(res => res.arrayBuffer());
            const audio = new Audio();
            audio.src = createBlobURL(responseBlob);

            const myMessage = { sender: "me", blobUrl: audio.src };
            const messagesArr = [...messages, myMessage];
            setMessages(messagesArr);
            console.log("My message added to messages array:", messagesArr);

            // Play audio
            setIsLoading(false);
            console.log("Playing audio...");
            audio.play();
        } catch (err) {
            console.error("Error occurred:", err);
            setIsLoading(false);
        }
    };

    function createBlobURL(data: any) {
        console.log("Creating blob URL...");
        const blob = new Blob([data], { type: "audio/mpeg" });
        const url = window.URL.createObjectURL(blob);
        console.log("Blob URL created:", url);
        return url;
    }

    return (
        <>
            <div className="h-screen overflow-y-hidden ">
                <Title setMessages={setMessages} />
                <h1>teste</h1>
                <div className="h-screen overflow-y-hidden">
                    {/* Title */}
                    <Title setMessages={setMessages} />

                    <div className="flex flex-col justify-between h-full overflow-y-scroll pb-96">
                        {/* Conversation */}
                        <div className="mt-5 px-5">
                            {messages?.map((audio, index) => (
                                <div
                                    key={index + audio.sender}
                                    className={
                                        "flex flex-col " +
                                        (audio.sender === "rachel" &&
                                            "flex items-end")
                                    }
                                >
                                    {/* Sender */}
                                    <div className="mt-4 ">
                                        <p
                                            className={
                                                audio.sender === "rachel"
                                                    ? "text-right mr-2 italic text-green-500"
                                                    : "ml-2 italic text-blue-500"
                                            }
                                        >
                                            {audio.sender}
                                        </p>

                                        {/* Message */}
                                        <audio
                                            src={audio.blobUrl}
                                            className="appearance-none"
                                            controls
                                        />
                                    </div>
                                </div>
                            ))}

                            {messages.length === 0 && !isLoading && (
                                <div className="text-center font-light italic mt-10">
                                    Send Rachel a message...
                                </div>
                            )}

                            {isLoading && (
                                <div className="text-center font-light italic mt-10 animate-pulse">
                                    Give me a few seconds...
                                </div>
                            )}
                        </div>

                        {/* Recorder */}
                        <div className="fixed bottom-0 w-full py-6 border-t text-center bg-gradient-to-r from-customPurple1 to-customPurple2">
                            <div className="flex justify-center items-center w-full">
                                <div>
                                    <RecordMessage handleStop={handleStop} />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
};

export default Controller;
